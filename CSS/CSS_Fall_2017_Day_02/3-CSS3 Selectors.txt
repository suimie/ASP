CSS3 Selectors
===============
In CSS, a selector is the HTML element or elements to which a CSS rule is applied. Put simply, the selector tells the browser what to style.

Grouping Selectors
When more than one selector appears in the same rule, they are said to be grouped. You can group multiple selectors together in a single rule by providing a comma after each selector; the result is that a rule applies to more than one selector at a time.

th, td {
	padding: 0 10px 0 0;
	text-align: left;
}


♦ The universal selector is an asterisk. When used alone, the universal selector tells the CSS interpreter to apply the CSS rule to all elements in the document.

Universal
* { 
	color: blue; 
}

* {
	font-family: Arial, Helvetica,sans-serif;
}


Type
div { color: blue; }


DESCENDANT SELECTORS
=====================
In CSS, descendant means an element that is a child, grandchild, great grandchild, and so on, of another element. Descendant selectors apply style based on whether one element contains another.

div p { color: blue; }
div.planet h2 {
	font-size: 18px;
	margin-top: 0;
}

div.planet table td {
	padding: 0 10px 0 0;
	text-align: left;
}


DIRECT CHILD SELECTORS
======================
Direct child selectors operate much like descendant selectors in that they also rely on an ancestral relationship to decide where to apply style. Descendant selectors, however, are more ambiguous because they apply to any descendant of an element; the descendant can be a grandchild or a great-grandchild, or a great-great-grandchild, and so on. Direct child selectors apply only to immediate children of the element. This is achieved by introducing a new syntax for the selector:
body > .intro {
	font-weight: bold;
}

Like descendant selectors, direct child selectors are chained together, but instead of a space, a greater than, or right angled bracket, is used to separate each element in the selector.

Direct Child
div > p { color: blue; }


NEXT SIBLING SELECTOR
======================
The official name of the selector, according to the W3C, is the adjacent sibling combinator or next sibling. The next sibling selector selects an element’s next sibling, in other words the element following another element if it matches the second part of the selector. This syntax for this selector is:
h1 + .intro {
	font-weight: bold;
}

This will select any elements with the class name intro that immediately follow an h1 element.
Next sibling selectors are chained together with a plus sign.

Direct Adjacent Sibling
p + p { color: blue; }

Indirect Adjacent Sibling
p ~ p { color: blue; }


ATTRIBUTE SELECTORS
====================
Attribute selectors are used to apply style sheet declarations based on the presence of attributes or attribute values of an HTML element.

Select by Presence of an Attribute
The simplest attribute selector is one that applies a style sheet rule based on the presence of an attribute. It doesn’t matter what the value given to the attribute is, just that the element has the specified attribute.

This syntax for attribute selectors is:
input[name] {
	border: 2px dashed #000;
}


Select by Attribute Value
You are not limited to detecting the presence of an attribute, attribute value selectors delegate style declarations based on an attribute’s presence and value.

The syntax is very similar:
	input[name="email"] {
	border: 2px dashed #000;
}


Attribute’s value matches value exactly
input[type="text"] { 
	color: blue; 
}


Attribute Substring Selectors
==============================
Taking the flexibility of attribute selectors even further, the selectors in the following sections choose elements based on whether a particular string appears at the beginning of an attribute’s value, at the end of an attribute’s value, or anywhere inside an attribute’s value. You can select an element based on what appears at the beginning of an attribute’s value.


Selection Based on Attribute Values That Begin with a String
============================================================
The first type of substring attribute selector chooses elements with an attribute value that begins with a particular string.

The syntax for this selector is:
	a[href^="mailto:"] {
	padding-left: 23px;
	background: transparent url(icon-email.png) no-repeat center left;
}

The ^ character following the href attribute means to select elements where the value of the preceding attribute begins with the value that follows.



Selection Based on Attribute Values That End with a String
===========================================================
The next substring attribute selector chooses elements with attributes whose value ends with a string. The syntax is:
	input[id$="name"] {
	border: 2px dashed #000;
}

The selector of the preceding rule uses the dollar sign to signify that the selector matches the end of the attribute value. This changes all input elements with an id attribute value that ends in the string name.


Selection Based on Attribute Values That Contain a String
=========================================================
The final type of attribute substring selector is a wildcard attribute substring selector. It selects an element that contains an attribute whose value contains a string anywhere in the value: at the beginning, the end, or anywhere in the middle. This attribute substring selector uses an asterisk in the syntax to indicate that the selector is looking anywhere inside the value:

[name*="recipe"] {
	border: 2px dashed #000;
}




Class
div.class { color: blue; }

Multiple classes, e.g.,
class="class1 class2"
.class1.class2 { color: blue; }


ID
div#id { color: blue; }


PSEUDO-CLASSES
===============
Pseudo-classes are used to represent dynamic events, a change in state, or a more general condition present in the document that is not easily accomplished through other means. This may be the user’s mouse rolling over or clicking on an element. In more general terms, pseudo-classes style a specific state present in the target element, for example, a previously visited hyperlink. Pseudo-classes allow the author the freedom to dictate how the element should appear under different conditions.


Dynamic Pseudo-Classes
The following are considered dynamic pseudo-classes. They are a classification of elements only present after certain user actions have or have not occurred:
➤ :link: Signifies unvisited hyperlinks
➤ :visited: Indicates visited hyperlinks
➤ :hover: Signifies an element that currently has the user’s mouse pointer hovering over it
➤ :focus: Signifies an element that currently has focus, for example if the user has used their keyboard to navigate to a link
➤ :active: Signifies an element on which the user is currently clicking

a:link {
	color: meduimblue;
}

a:visited {
	color: magenta;
}

a{
	text-decoration: none;
}

a:focus, a:hover {
	text-decoration: underline;
}

a:active {
	color: red;
}


Generating Content Before and After an Element
===============================================
Sometimes, you might want to add a style before or after an element that doesn’t warrant using another element within the HTML to do that. For this, you can use :before and :after pseudo-elements.

blockquote p:before {
content: "\201C";
}


The \201C represents an opening quotation mark ("). It's an American Standard Code for Information Interchange (ASCII) value.


You can find more ASCII codes at www.ascii.cl/htmlcodes.htm.








STRUCTURAL PSEUDO-CLASSES
==========================
Much like the direct child and next sibling selectors, structural pseudo-classes are used to refer to an element’s position in a document.

:first-child
The :first-child structural pseudo-class applies only when an element is the fi rst child of another element.

:last-child
The :last-child structural pseudo-class applies only when an element is the last child of another element.

:nth-child(n)
The :nth-child(n) structural pseudo-class applies only when an element is the nth child of another element; in other words, if the value in the brackets is 3, the third child element will be selected.

p:nth-child(3) {
	background-color: lightblue;
}

:nth-child(1) represents the first element, which can also be expressed as :first-child.

:last-child to select the last element, or if you want to start counting from the last child, you can use :nth-last-child(), where :nth-lastchild(1) is the last element and :nth-last-child(2) is the element next to the last.
You can also select an element if it is the only child of its parent (it has no siblings), using :only-child.



As with :nth-child(), :nth-of-type() has similar variants. :nth-last-of-type() allows for counting elements of the same type from the last child. :first-of-type selects the first element of a specific type, and :last-of-type selects the last element of a specific type. Finally, :only-of-type selects an element if it is the only child of the specified type (it can have siblings, but only those that aren’t of the same type).

:nth-child(), :first-of-type(), :last-of-type(), and :only-of-type() aren’t supported in Internet Explorer versions 6, 7, and 8.


Selecting Empty Elements
=========================
Usually, you should aim to avoid having empty elements on a page (although they are sometimes used for dynamic sites where content is added after the browser or a user carries out a particular action). To select an empty element, use the :empty pseudo-class.

:empty() isn’t supported in Internet Explorer versions 6, 7, and 8.

Selecting the Root Element
==========================
The root of a web page can be selected using :root, which most often is the <html> element.

:root() isn’t supported in Internet Explorer versions 6, 7, and 8.

The Target Pseudo-Class
=========================
You are able to place an anchor link on a page that refers to a section on that same page. At the bottom of the Cool Shoes & Socks page, there is a Back to Top anchor link, which links to the element with an ID of header. When the user clicks that link, the browser moves back up to the header element (at the top of the page). The header is the target of this link.

If a user clicks on an anchor link, you can style its target to make it stand out, like so:
:target {
	color: red;
}


The UI Element States Pseudo-Classes
====================================
The :enabled and :disabled pseudo-classes are used to select elements in enabled and disabled states. For example, on a dynamic page, a form may contain input fields irrelevant to a particular user and can be disabled to prevent the user from interacting with that field.

You disable a field in the HTML, as follows:
<input disabled type="email" placeholder="Your Email Address" />


A field that isn’t disabled is considered enabled. If you want to prevent user frustration when disabling an input field, it’s a good idea to change its color to represent that, like so:

:disabled {
	background-color: lightgray;
}


Another element state pseudo-class is :checked, which again relates to input forms—this time, check boxes and radio buttons. When an element is checked, it can be styled as follows:

:checked {
	background-color: green;
}

:enabled(), :disabled() and :checked(), aren’t supported in Internet Explorer versions 6, 7, and 8.


The Language Pseudo-Class
==========================
You can use the :lang pseudo-class to declare styles based on the language of an element. Assume, for example, a quote is in French, like this:

<blockquote>
<p lang="fr">Integer aliquet, lacus in ultricies venenatis, eros urna faucibus tellus, sed sollicitudin.</p>
</blockquote>

The HTML specifies the quote is of a French language (lang="fr"). To apply a style to only elements of French language, you can use the following:

:lang(fr) {
	color: blue;
}

:lang() isn’t supported in Internet Explorer versions 6 and 7.


The Negation Pseudo-Class
=========================
The negation pseudo-class, :not(), allows you to select elements that do not represent its argument. As you saw with the language pseudo-class, you can style an element if it matches a particular language, but what if you want to style all languages except French? Rather than add each language code to the language pseudo-class, you can do the following:

:not(:lang(fr)) {
	color: blue;
}

Now all elements that aren’t of the French language have blue text.

:not() isn’t supported in Internet Explorer versions 6 and 7.


Selecting Child Elements of a Particular Type
=============================================
Where :nth-child()selects a child element based on its position among its siblings
(regardless of what types of element they are), :nth-of-type() does the same but counts
only siblings of the same type:
p:nth-of-type(1) {
background-color: lightblue;
}








!important Rules
Along with the need for the cascade in CSS is the need to override it. This is where !important rules come in. The !important syntax appears within a declaration, after the property value and before the semicolon that terminates the declaration.

A delimiter marks the ending of one thing and the beginning of another. Here the exclamation mark signals the end of the declaration. The important keyword must appear next, followed by a semicolon to terminate the declaration.

body {
	background: #000 !important;
}

A declaration containing the !important rule, like the preceding one, takes precedence over any other declaration even the style attribute.

If more than one !important rule appears in a style sheet, and the style sheet has the same origin — that is, both rules come from the author’s style sheet or both come from the user’s style sheet — the latter rule wins out over any specified previously.

For this reason, it is strongly advised that you never use !important rules anywhere in your code. The only place that there could be a good reason for using one is in user defined style sheets when a specific style is required to make a site usable, for example specific foreground and background colors. Using !important rules in author style sheets makes it harder for users to define their own rules and makes site maintenance much more difficult as the only way to override an !important rule is to include another !important rule later in the author style sheet.


Absolute Font Sizes
The <absolute-size> value notation of the font-size property refers to one of seven keyword values. Absolute values for the font-size property are defi ned using keywords that range from xx-large to xx-small.







